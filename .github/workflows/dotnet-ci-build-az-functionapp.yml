name: dotnet-ci-build-az-functionapp

on:
  workflow_call:
      inputs:
          pulumi_stack_name:
              required: false
              type: string
              default: evoy/${{ github.event.repository.name }}
              description: Full name of pulumi stack. Defaults to evoy/[repo-name]
          infrasturcture_dir:
            required: false
            type: string
            default: ./Infrastructure
          dotnet-version:
            required: false
            type: string
            default: '7.0'
          check-code-formatting:
            required: false
            type: boolean
            default: false
      outputs:
          sem_ver:
            description: "SemVer from GitVersion"
            value: ${{ jobs.deploy.outputs.semVer }}
  workflow_dispatch:
env: 
  build_configuration: Release
  ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}

jobs:
  build:

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}.x
    - name: Check code formatting
      if: ${{ inputs.check-code-formatting }}
      uses: evoy-as/.github/.github/actions/dotnet-core@main
      with: 
        command: format
        arguments: --verify-no-changes
        projects: "**/*.csproj"
    - name: Authenticate NuGet
      run: |
          dotnet nuget update source evoy -u ${{ github.event.repository.name }} -p ${{ secrets.GH_PACKAGES_TOKEN }} -s https://nuget.pkg.github.com/evoy-as/index.json --store-password-in-clear-text
      working-directory: ${{ inputs.infrasturcture_dir }}
    - name: Output
      run: |
        echo "config: ${{ env.build_configuration  }}"
    - name: Restore project dependencies
      uses: evoy-as/.github/.github/actions/dotnet-core@main
      with: 
        command: restore
        projects: "**/*.csproj"
        arguments:
    - name: Build the projects - ${{ env.build_configuration }}
      uses: evoy-as/.github/.github/actions/dotnet-core@main
      with: 
        command: build
        arguments: --no-restore --configuration ${{ env.build_configuration }}
        projects: "**/*.csproj"
    - name: Run unit tests with coverage - ${{ env.build_configuration }}
      uses: evoy-as/.github/.github/actions/dotnet-core@main
      with: 
        command: test
        arguments: --no-build --configuration ${{ env.build_configuration }} --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
        projects: "**/*.Test*.csproj"
    - name: Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()    # run this step even if previous step failed
      with:
        name: Unit test results            # Name of the check run which will be created
        path: ./**/TestResults/*.trx    # Path to test results
        reporter: dotnet-trx        # Format of test results
    - name: Code coverage summary
      uses: evoy-as/.github/.github/actions/code-coverage-summary@main
  deploy:

    runs-on: ubuntu-latest
    needs: build
    outputs: 
      semVer: ${{ env.GitVersion_SemVer }} # $GITHUB_ENV variable from gitversion-tag
    env:
        pulumi_stack_name: ${{ inputs.pulumi_stack_name }} 

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}.x
    - name: Authenticate NuGet
      run: |
          dotnet nuget update source evoy -u ${{ github.event.repository.name }} -p ${{ secrets.GH_PACKAGES_TOKEN }} -s https://nuget.pkg.github.com/evoy-as/index.json --store-password-in-clear-text
      working-directory: ${{ inputs.infrasturcture_dir }}
    - name: Restore project dependencies
      uses: evoy-as/.github/.github/actions/dotnet-core@main
      with: 
        command: restore
        projects: "**/*.csproj"
        arguments:
    - name: Build and publish function apps
      uses: evoy-as/.github/.github/actions/dotnet-core@main
      with: 
        command: publish
        arguments: --no-restore --configuration ${{ env.build_configuration }}
        projects: "**/*FunctionApp.csproj"
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 6.0.x
    - name: Set Pulumi stack
      id: pulumi_selected_stack
      run: |
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
              echo "selected_stack_name=${{ env.pulumi_stack_name }}/prod" >> "$GITHUB_OUTPUT"
          else
              echo "selected_stack_name=${{ env.pulumi_stack_name }}/dev" >> "$GITHUB_OUTPUT"
          fi
    - name: Update infrastructure with Pulumi stack - ${{ steps.pulumi_selected_stack.outputs.selected_stack_name }}
      uses: pulumi/actions@v4
      with:
        command: up
        stack-name: ${{ steps.pulumi_selected_stack.outputs.selected_stack_name }}
        work-dir: ${{ inputs.infrasturcture_dir }}
      env:
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
    - name: Tag GitVersion
      if: success()
      id: gitversion-tag
      uses: evoy-as/.github/.github/actions/gitversion-tag@main

  create_release:
    if: github.ref_name == github.event.repository.default_branch
    needs: deploy
    name: Create release
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.deploy.outputs.semVer }}
        run: |
          echo "Tag: $tag"
          release=$(gh release list | awk '{ print $2 }' | grep $tag || true)
          if [ ! -z "$release" ]  
          then
              echo "Release $release exists."
          else
            echo "Creating release $release"
            latest_release_tag=$(gh release list | grep 'Latest' | awk '{print $3}')
            gh release create "$tag" \
                --latest \
                --repo="$GITHUB_REPOSITORY" \
                --title="${tag#v}" \
                --generate-notes \
                --notes-start-tag "$latest_release_tag"
          fi