name: Create an IoT Edge deployment in a target IoT Hub

inputs:
  azure-credentials:
    description: "Credentials used to authenticate Azure CLI."
    required: true
    type: string
  content:
    description: "The content of the manifest. Can be a file name or a string containing JSON"
    required: true
    type: string
  deployment-name:
    description: "The name used for the deployment. Deployment name must end with - before version number. Example. cd-iot-edge-1_0_0"
    required: true
    type: string
  layered:
    description: "Wether or not this deployment should be layered. Defaults to false."
    default: false
    required: false
    type: boolean
  iot-hub-name:
    description: "The name of the IoT Hub that the deployment should be created for."
    required: true
    type: string
  priority:
    default: 0
    description: "The priority of the deployment."
    required: false
    type: number
  target-condition:
    default: ""
    description: "The target condition of the deployment."
    required: false
    type: string
  deployment-strategy:
    # IoT hub allows 100 deployment configurations, so we need to delete previous or unused deployements
    # to avoid failed deployments
    default: DeletePrevious
    description: "Options are: Update, DeletePrevious, DeletePreRelease"
    required: false
    type: string
runs:
  using: "composite"
  steps:
    - name: "Login via Azure CLI"
      uses: azure/login@v1
      with:
        creds: ${{ inputs.azure-credentials }}

    - name: "Deploy edge manifest to IoT Hub"
      run: |
        echo "Install azure-iot extension"
        az config set extension.use_dynamic_install=yes_without_prompt
        az extension add --name azure-iot

        echo "Deploying '$deployment_name' to IoT Hub: '$iot_hub_name'"

        function delete_existing_deployment() {
            echo "Deleting previous deployment: '$1'"
            az iot edge deployment delete -n $iot_hub_name -d "$1"
            echo "Deleted previous deployment: '$1'"
        }
      
        if [[ "${{ inputs.deployment-strategy }}" == "Update" ]]; then
            existingDeployment=$(az iot edge deployment list --hub-name $iot_hub_name --query "reverse(sort_by([?id=='$deployment_name'].{id:id, created:createdTimeUtc}, &created))[0].id" --output tsv)
            if [ ! -z "$existingDeployment" ]
            then
              delete_existing_deployment "$existingDeployment"
            fi
        else 
            # DeletePreRelease: Find any pre-release versions for the existing deployment. I.e. deployment-name='1.0.1' would find '1.0.1-pull-request1' if appliedCount=0
            deployment_name_starts_with=$deployment_name
            if [[ "${{ inputs.deployment-strategy }}" == "DeletePrevious" ]]; then
              # Find the previous deployment which starts with the same name without the version number.
              # Deployment name without version
              deployment_name_starts_with=$(echo "$deployment_name" | grep -Po '.*(?=-)')
            fi
            echo "Existing deployment to look for $deployment_name_starts_with"
            existingDeployment=$(az iot edge deployment list --hub-name $iot_hub_name --query "reverse(sort_by([?systemMetrics.results.appliedCount ==\`0\` && starts_with(id,'$deployment_name_starts_with')].{id:id, created:createdTimeUtc}, &created))[0].id" --output tsv)
        fi
        echo "Existing deployment: '$existingDeployment'"
        echo "Creating deployment: '$deployment_name'"
        az iot edge deployment create -n $iot_hub_name -d "$deployment_name" --content ${{ inputs.content }} --target-condition "${{ inputs.target-condition }}" --layered ${{ inputs.layered }} --priority ${{ inputs.priority }}
        echo "Created deployment: '$deployment_name'"

        if [ $? -eq 0 ]; then 
          if [[ "${{ inputs.deployment-strategy }}" != "Update" ]]; then
            if [ ! -z "$existingDeployment" ]
            then
              delete_existing_deployment "$existingDeployment"
            fi
          fi
        fi
      shell: bash
      env:
        deployment_name: ${{ inputs.deployment-name }}
        iot_hub_name: ${{ inputs.iot-hub-name }}

    - name: "Logout of Azure CLI"
      shell: bash
      run: |
        az logout
        az cache purge
        az account clear

# dpkg --print-architecture
# Linux rpi-agent-03 6.1.0-rpi7-rpi-v8 #1 SMP PREEMPT Debian 1:6.1.63-1+rpt1 (2023-11-24) aarch64 GNU/Linux
# Linux raspberrypi  6.1.21-v8+ #1642 SMP PREEMPT Mon Apr  3 17:24:16 BST 2023 aarch64 GNU/Linux
